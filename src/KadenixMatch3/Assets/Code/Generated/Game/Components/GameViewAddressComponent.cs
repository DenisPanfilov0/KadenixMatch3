//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherViewAddress;

    public static Entitas.IMatcher<GameEntity> ViewAddress {
        get {
            if (_matcherViewAddress == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ViewAddress);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherViewAddress = matcher;
            }

            return _matcherViewAddress;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.ViewAddress viewAddress { get { return (Code.Common.ViewAddress)GetComponent(GameComponentsLookup.ViewAddress); } }
    public string ViewAddress { get { return viewAddress.Value; } }
    public bool hasViewAddress { get { return HasComponent(GameComponentsLookup.ViewAddress); } }

    public GameEntity AddViewAddress(string newValue) {
        var index = GameComponentsLookup.ViewAddress;
        var component = (Code.Common.ViewAddress)CreateComponent(index, typeof(Code.Common.ViewAddress));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceViewAddress(string newValue) {
        var index = GameComponentsLookup.ViewAddress;
        var component = (Code.Common.ViewAddress)CreateComponent(index, typeof(Code.Common.ViewAddress));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveViewAddress() {
        RemoveComponent(GameComponentsLookup.ViewAddress);
        return this;
    }
}
