//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherIncreaseMoves;

    public static Entitas.IMatcher<GameEntity> IncreaseMoves {
        get {
            if (_matcherIncreaseMoves == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.IncreaseMoves);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherIncreaseMoves = matcher;
            }

            return _matcherIncreaseMoves;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.CountingMoves.IncreaseMoves increaseMoves { get { return (Code.Gameplay.Features.CountingMoves.IncreaseMoves)GetComponent(GameComponentsLookup.IncreaseMoves); } }
    public int IncreaseMoves { get { return increaseMoves.Value; } }
    public bool hasIncreaseMoves { get { return HasComponent(GameComponentsLookup.IncreaseMoves); } }

    public GameEntity AddIncreaseMoves(int newValue) {
        var index = GameComponentsLookup.IncreaseMoves;
        var component = (Code.Gameplay.Features.CountingMoves.IncreaseMoves)CreateComponent(index, typeof(Code.Gameplay.Features.CountingMoves.IncreaseMoves));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceIncreaseMoves(int newValue) {
        var index = GameComponentsLookup.IncreaseMoves;
        var component = (Code.Gameplay.Features.CountingMoves.IncreaseMoves)CreateComponent(index, typeof(Code.Gameplay.Features.CountingMoves.IncreaseMoves));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveIncreaseMoves() {
        RemoveComponent(GameComponentsLookup.IncreaseMoves);
        return this;
    }
}
