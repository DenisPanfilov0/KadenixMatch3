//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInteractionStep;

    public static Entitas.IMatcher<GameEntity> InteractionStep {
        get {
            if (_matcherInteractionStep == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InteractionStep);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInteractionStep = matcher;
            }

            return _matcherInteractionStep;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep interactionStep { get { return (Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep)GetComponent(GameComponentsLookup.InteractionStep); } }
    public int InteractionStep { get { return interactionStep.Value; } }
    public bool hasInteractionStep { get { return HasComponent(GameComponentsLookup.InteractionStep); } }

    public GameEntity AddInteractionStep(int newValue) {
        var index = GameComponentsLookup.InteractionStep;
        var component = (Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep)CreateComponent(index, typeof(Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInteractionStep(int newValue) {
        var index = GameComponentsLookup.InteractionStep;
        var component = (Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep)CreateComponent(index, typeof(Code.Gameplay.Features.ActiveInteractionFeature.InteractionStep));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInteractionStep() {
        RemoveComponent(GameComponentsLookup.InteractionStep);
        return this;
    }
}
